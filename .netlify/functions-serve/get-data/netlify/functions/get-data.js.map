{
  "version": 3,
  "sources": ["../../home/project/netlify/functions/get-data.ts"],
  "sourceRoot": "/tmp/tmp-196-sPS7e2Jm0tSE",
  "sourcesContent": ["import { Handler } from \"@netlify/functions\";\nimport { readFileSync } from \"fs\";\nimport { join } from \"path\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\n  \"Access-Control-Allow-Methods\": \"GET, OPTIONS\",\n};\n\nconst defaultData = {\n  tags: {\n    tags: [\n      { keyword: \"mcdonalds\", color: \"#FF0000\", count: 0 },\n      { keyword: \"beer cans\", color: \"#FFD700\", count: 0 },\n      { keyword: \"plastic bottles\", color: \"#00FF00\", count: 0 },\n      { keyword: \"cigarette butts\", color: \"#808080\", count: 0 },\n      { keyword: \"food wrappers\", color: \"#FFA500\", count: 0 }\n    ]\n  },\n  locations: {\n    locations: []\n  }\n};\n\nexport const handler: Handler = async (event) => {\n  if (event.httpMethod === \"OPTIONS\") {\n    return {\n      statusCode: 204,\n      headers: corsHeaders,\n      body: \"\"\n    };\n  }\n\n  try {\n    const filename = event.queryStringParameters?.filename;\n\n    if (!filename) {\n      throw new Error(\"No filename provided\");\n    }\n\n    if (!filename.match(/^[a-zA-Z0-9_-]+\\.json$/)) {\n      throw new Error(\"Invalid filename\");\n    }\n\n    const allowedFiles = [\"tags.json\", \"locations.json\"];\n    if (!allowedFiles.includes(filename)) {\n      throw new Error(\"Unauthorized file access\");\n    }\n\n    const filePath = join(__dirname, 'data', filename);\n    let data;\n    \n    try {\n      const fileContent = readFileSync(filePath, 'utf-8');\n      data = JSON.parse(fileContent);\n    } catch (err) {\n      const key = filename.replace('.json', '') as keyof typeof defaultData;\n      data = defaultData[key];\n    }\n\n    return {\n      statusCode: 200,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...corsHeaders,\n      },\n      body: JSON.stringify(data),\n    };\n  } catch (error) {\n    console.error(\"Error:\", error);\n    return {\n      statusCode: 500,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...corsHeaders,\n      },\n      body: JSON.stringify({ error: error instanceof Error ? error.message : 'Unknown error' }),\n    };\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAA6B;AAC7B,kBAAqB;AAErB,IAAM,cAAc;AAAA,EAClB,+BAA+B;AAAA,EAC/B,gCAAgC;AAAA,EAChC,gCAAgC;AAClC;AAEA,IAAM,cAAc;AAAA,EAClB,MAAM;AAAA,IACJ,MAAM;AAAA,MACJ,EAAE,SAAS,aAAa,OAAO,WAAW,OAAO,EAAE;AAAA,MACnD,EAAE,SAAS,aAAa,OAAO,WAAW,OAAO,EAAE;AAAA,MACnD,EAAE,SAAS,mBAAmB,OAAO,WAAW,OAAO,EAAE;AAAA,MACzD,EAAE,SAAS,mBAAmB,OAAO,WAAW,OAAO,EAAE;AAAA,MACzD,EAAE,SAAS,iBAAiB,OAAO,WAAW,OAAO,EAAE;AAAA,IACzD;AAAA,EACF;AAAA,EACA,WAAW;AAAA,IACT,WAAW,CAAC;AAAA,EACd;AACF;AAEO,IAAM,UAAmB,OAAO,UAAU;AAC/C,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,MAAM;AAAA,IACR;AAAA,EACF;AAEA,MAAI;AACF,UAAM,WAAW,MAAM,uBAAuB;AAE9C,QAAI,CAAC,UAAU;AACb,YAAM,IAAI,MAAM,sBAAsB;AAAA,IACxC;AAEA,QAAI,CAAC,SAAS,MAAM,wBAAwB,GAAG;AAC7C,YAAM,IAAI,MAAM,kBAAkB;AAAA,IACpC;AAEA,UAAM,eAAe,CAAC,aAAa,gBAAgB;AACnD,QAAI,CAAC,aAAa,SAAS,QAAQ,GAAG;AACpC,YAAM,IAAI,MAAM,0BAA0B;AAAA,IAC5C;AAEA,UAAM,eAAW,kBAAK,WAAW,QAAQ,QAAQ;AACjD,QAAI;AAEJ,QAAI;AACF,YAAM,kBAAc,wBAAa,UAAU,OAAO;AAClD,aAAO,KAAK,MAAM,WAAW;AAAA,IAC/B,SAAS,KAAK;AACZ,YAAM,MAAM,SAAS,QAAQ,SAAS,EAAE;AACxC,aAAO,YAAY,GAAG;AAAA,IACxB;AAEA,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,GAAG;AAAA,MACL;AAAA,MACA,MAAM,KAAK,UAAU,IAAI;AAAA,IAC3B;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,UAAU,KAAK;AAC7B,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,GAAG;AAAA,MACL;AAAA,MACA,MAAM,KAAK,UAAU,EAAE,OAAO,iBAAiB,QAAQ,MAAM,UAAU,gBAAgB,CAAC;AAAA,IAC1F;AAAA,EACF;AACF;",
  "names": []
}
