{
  "version": 3,
  "sources": ["../../home/project/netlify/functions/save-data.ts"],
  "sourceRoot": "/tmp/tmp-196-CQLjv0Ga4tcq",
  "sourcesContent": ["import { Handler } from \"@netlify/functions\";\nimport { writeFileSync } from \"fs\";\nimport { join } from \"path\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\n  \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",\n};\n\nexport const handler: Handler = async (event) => {\n  if (event.httpMethod === \"OPTIONS\") {\n    return {\n      statusCode: 204,\n      headers: corsHeaders,\n      body: \"\"\n    };\n  }\n\n  try {\n    if (!event.body) {\n      throw new Error(\"No data provided\");\n    }\n\n    const { filename, data } = JSON.parse(event.body);\n\n    if (!filename.match(/^[a-zA-Z0-9_-]+\\.json$/)) {\n      throw new Error(\"Invalid filename\");\n    }\n\n    const allowedFiles = [\"tags.json\", \"locations.json\"];\n    if (!allowedFiles.includes(filename)) {\n      throw new Error(\"Unauthorized file access\");\n    }\n\n    const filePath = join(__dirname, 'data', filename);\n    writeFileSync(filePath, JSON.stringify(data, null, 2));\n\n    return {\n      statusCode: 200,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...corsHeaders,\n      },\n      body: JSON.stringify({ success: true }),\n    };\n  } catch (error) {\n    console.error(\"Error:\", error);\n    return {\n      statusCode: 500,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...corsHeaders,\n      },\n      body: JSON.stringify({ error: error instanceof Error ? error.message : 'Unknown error' }),\n    };\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAA8B;AAC9B,kBAAqB;AAErB,IAAM,cAAc;AAAA,EAClB,+BAA+B;AAAA,EAC/B,gCAAgC;AAAA,EAChC,gCAAgC;AAClC;AAEO,IAAM,UAAmB,OAAO,UAAU;AAC/C,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,MAAM;AAAA,IACR;AAAA,EACF;AAEA,MAAI;AACF,QAAI,CAAC,MAAM,MAAM;AACf,YAAM,IAAI,MAAM,kBAAkB;AAAA,IACpC;AAEA,UAAM,EAAE,UAAU,KAAK,IAAI,KAAK,MAAM,MAAM,IAAI;AAEhD,QAAI,CAAC,SAAS,MAAM,wBAAwB,GAAG;AAC7C,YAAM,IAAI,MAAM,kBAAkB;AAAA,IACpC;AAEA,UAAM,eAAe,CAAC,aAAa,gBAAgB;AACnD,QAAI,CAAC,aAAa,SAAS,QAAQ,GAAG;AACpC,YAAM,IAAI,MAAM,0BAA0B;AAAA,IAC5C;AAEA,UAAM,eAAW,kBAAK,WAAW,QAAQ,QAAQ;AACjD,iCAAc,UAAU,KAAK,UAAU,MAAM,MAAM,CAAC,CAAC;AAErD,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,GAAG;AAAA,MACL;AAAA,MACA,MAAM,KAAK,UAAU,EAAE,SAAS,KAAK,CAAC;AAAA,IACxC;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,UAAU,KAAK;AAC7B,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,GAAG;AAAA,MACL;AAAA,MACA,MAAM,KAAK,UAAU,EAAE,OAAO,iBAAiB,QAAQ,MAAM,UAAU,gBAAgB,CAAC;AAAA,IAC1F;AAAA,EACF;AACF;",
  "names": []
}
